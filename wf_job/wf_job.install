<?php

/**
 * @file
 * Workflow job module installation functions.
 */

/**
 * Implements hook_schema().
 */
function wf_job_schema() {
  module_load_include('install', 'uuid', 'uuid');

  $uuid_field = uuid_schema_field_definition();
  $schema = array();
  $schema['wf_job'] = array(
    'description' => 'Workflow Jobs',
    'fields' => array(
      'jid' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The current version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,

        'default' => 0,
      ),
      'uuid' => $uuid_field,
      'bundle' => array(
        'description' => 'The bundle type for the job.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The job title.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'reference' => array(
        'description' => 'External references for the job.',
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'details' => array(
        'description' => 'Detailed information about the job.',
        'type' => 'text',
      ),
      'jsid' => array(
        'description' => 'Job status.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'owner' => array(
        'description' => 'Owner of the job.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'assigned' => array(
        'description' => 'User job is currently assigned to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'eid' => array(
        'description' => 'Current environment for the job.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'Job creation timestamp.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'modified' => array(
        'description' => 'Job last modified timestamp.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('jid'),
    'unique keys' => array(
      'uuid' => array('uuid'),
    ),
    'indexes' => array(
      'bundle' => array('bundle'),
      'environment' => array('eid'),
      'myjobs' => array('owner', 'assigned'),
      'status' => array('jsid'),
    ),
  );

  $schema['wf_job_revision'] = array(
    'description' => 'Workflow Job Revisions',
    'fields' => array(
      'jid' => array(
        'description' => 'Primary key.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The current version identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vuuid' => $uuid_field,
      'bundle' => array(
        'description' => 'The bundle type for the job.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The job title.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'reference' => array(
        'description' => 'External references for the job.',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
      'details' => array(
        'description' => 'Detailed information about the job.',
        'type' => 'text',
      ),
      'jsid' => array(
        'description' => 'Job revision status.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'owner' => array(
        'description' => 'Owner of the job revision.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'assigned' => array(
        'description' => 'User job revision was assigned to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'eid' => array(
        'description' => 'Environment for this revision.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'modified' => array(
        'description' => 'Timestamp for this revision.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user who made the change.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vid'),
    'unique keys' => array(
      'vuuid' => array('vuuid'),
    ),
    'indexes' => array(
      'jid' => array('jid'),
      'myjobs' => array('owner', 'assigned'),
      'status' => array('jsid'),
      'environment' => array('eid'),
    ),
  );

  $schema['wf_job_bundle'] = array(
    'description' => 'Stores information about all defined wf_job bundles.',
    'fields' => array(
      'bundle' => array(
        'description' => 'The machine-readable name of this wf_job type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this wf_job type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'detail' => array(
        'description' => 'The detail of this wf_job type.',
        'type' => 'text',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('bundle'),
    'unique keys' => array(),
  );

  $schema['wf_job_status'] = array(
    'description' => 'Workflow Job Status',
    'fields' => array(
      'jsid' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'The job title.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'description' => 'The machine name for job status.',
        'length' => 50,
        'not null' => FALSE,
      ),
      'module' => array(
        'type' => 'varchar',
        'description' => 'The name of the providing module.',
        'length' => 64,
        'default' => 'wf_job',
        'not null' => TRUE,
      ),
      'export_state' => array(
        'type' => 'int',
        'description' => 'The exportable status of the status.',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
      ),
      'system_status' => array(
        'type' => 'varchar',
        'description' => 'The current system status.',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('jsid'),
    'unique keys' => array(
      'status' => array('status'),
    ),
    'indexes' => array(),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function wf_job_install() {
  _wf_job_set_default_statuses('wf_job_status');
}

/**
 * Implements hook_uninstall().
 */
function wf_job_uninstall() {
  $variables = array(
    'wf_job_default_status',
    'wf_job_ext_ref_plugin',
    'wf_job_jsid_completed',
    'wf_job_jsid_new',
    'wf_job_slug_pattern',
    'wf_job_visit_plugin',
    'wf_job_login_plugin',
  );

  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Create default job status records.
 *
 * @param string $table_name
 *   The name of the table to insert the records into.
 */
function _wf_job_set_default_statuses($table_name) {
  $rows = array(
    'New',
    'Started',
    'In Review',
    'Approved',
    'Completed',
    'Needs Attention',
  );

  foreach ($rows as $status) {
    $record = array('status' => $status);
    drupal_write_record($table_name, $record);
  }

  // Hack for translation support.
  t('New');
  t('Started');
  t('In Review');
  t('Approved');
  t('Completed');
  t('Needs Attention');
}

/**
 * Create and populate the job status table.
 */
function wf_job_update_7001($sandbox) {
  $name = 'wf_job_status';
  $schema = wf_job_schema();
  $table = $schema[$name];
  db_create_table($name, $table);

  _wf_job_set_default_statuses($name);
}

/**
 * Add bundle table.
 */
function wf_job_update_7002($sandbox) {
  $name = 'wf_job_bundle';
  $schema = wf_job_schema();
  $table = $schema[$name];
  db_create_table($name, $table);
}

/**
 * Change the external field on schema.
 */
function wf_job_update_7003($sandbox) {
  $spec = array(
    'description' => 'Reference number for the job.',
    'type' => 'varchar',
    'length' => '50',
    'not null' => FALSE,
  );

  db_change_field('wf_job', 'reference', 'reference', $spec);
}

/**
 * Removes log summary field from schema.
 */
function wf_job_update_7004($sandbox) {
  $fields = array(
    'log_summary',
  );

  foreach ($fields as $field) {
    db_drop_field('wf_job_revision', $field);
  }
}

/**
 * Remove the reference unique key from schema.
 */
function wf_job_update_7005(&$sandbox) {
  db_drop_unique_key('wf_job', 'reference');
}

/**
 * Create new fields for wf_job_status table.
 */
function wf_job_update_7006($sandbox) {
  $fields = array(
    'machine_name' => array(
      'type' => 'varchar',
      'description' => 'The machine name for job status.',
      'length' => 50,
      'not null' => FALSE,
    ),
    'module' => array(
      'type' => 'varchar',
      'description' => 'The name of the providing module.',
      'length' => 64,
      'default' => 'wf_job',
      'not null' => TRUE,
    ),
    'export_state' => array(
      'type' => 'int',
      'description' => 'The exportable status of the status.',
      'not null' => TRUE,
      'default' => 0x01,
      'size' => 'tiny',
    ),
    'system_status' => array(
      'type' => 'varchar',
      'description' => 'The current system status.',
      'length' => 255,
      'not null' => FALSE,
    ),
  );

  foreach ($fields as $field => $specification) {
    db_add_field('wf_job_status', $field, $specification);
  }
}

/**
 * Update new fields for wf_job_status table.
 */
function wf_job_update_7007($sandbox) {
  $wf_job_status_entity = entity_load('wf_job_status');

  foreach ($wf_job_status_entity as $entity_id => $entity) {
    $entity_wrapper = entity_metadata_wrapper('wf_job_status', $entity_id);

    $status = $entity_wrapper->status->value();
    $system_status = strtolower($status);
    $machine_name = str_replace(' ', '_', $system_status);

    $entity_wrapper->system_status->set($system_status);
    $entity_wrapper->machine_name->set($machine_name);
    $entity_wrapper->save();
  }
}

/**
 * Removes log field from schema.
 */
function wf_job_update_7008($sandbox) {
  $table = 'wf_job_revision';
  $field = 'log';

  if (db_field_exists($table, $field)) {
    db_drop_field($table, $field);
  }
}

/**
 * Add new column 'detail' to the wf_job_bundle table.
 */
function wf_job_update_7009($sandbox) {
  if (db_field_exists('wf_job_bundle', 'detail')) {
    return;
  }

  $spec = array(
    'description' => 'The detail of this wf_job type.',
    'type' => 'text',
  );

  db_add_field('wf_job_bundle', 'detail', $spec);
}

/**
 * Extend the length of the references field.
 */
function wf_job_update_7010($sandbox) {
  $spec = array(
    'description' => 'External references for the job.',
    'type' => 'varchar',
    'length' => '100',
    'not null' => FALSE,
  );

  foreach (array('wf_job', 'wf_job_revision') as $table) {
    db_change_field($table, 'reference', 'reference', $spec);
  }
}
